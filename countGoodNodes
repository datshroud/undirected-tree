class Solution {
public:
    vector<vector<int>> vt;
    int ans;

    int dfs(int node, int parent){
        int totalNodes = 0;
        int subtreeSize = -1;
        bool isGood = true;
        for (int child : vt[node]){
            if (child == parent) continue;
            int currentSize = dfs(child, node);
            if (subtreeSize == -1) subtreeSize = currentSize;
            else if (subtreeSize != currentSize) isGood = false;
            totalNodes += currentSize;
        }
        if (isGood) ans++;
        return totalNodes + 1;
    }
    int countGoodNodes(vector<vector<int>>& edges) {
        int n = edges.size() + 1;
        vt.resize(n);
        for (const auto &e : edges){
            vt[e[0]].push_back(e[1]);
            vt[e[1]].push_back(e[0]);
        }
        ans = 0;
        dfs(0, -1);
        return ans;
    }
};
